using SpacetimeDB;

namespace StdbModule.Utils;

/// <summary>
/// Provides utility methods for writing structured client-side log entries
/// to the <c>ClientDebugLog</c> table within the SpacetimeDB context.
/// </summary>
/// <remarks>
/// The <see cref="ClientLog"/> class offers standardized logging methods to record
/// debug information generated by clients, categorized by severity levels:
/// <list type="bullet">
///   <item><description><b>Error</b>: Critical issues that indicate failures or exceptions (Level 0).</description></item>
///   <item><description><b>Warning</b>: Non-critical issues that may need attention (Level 1).</description></item>
///   <item><description><b>Info</b>: General messages for informational purposes (Level 5).</description></item>
/// </list>
/// These methods should be invoked within reducer logic to persist important
/// runtime events associated with the invoking identity (<c>ctx.Sender</c>).
/// </remarks>
public static class ClientLog
{
    /// <summary>
    /// Logs an error message to the <c>ClientDebugLog</c> table for the current sender.
    /// </summary>
    /// <param name="ctx">
    /// The <see cref="ReducerContext"/> containing metadata about the current reducer execution,
    /// including the identity of the sender and the current timestamp.
    /// </param>
    /// <param name="message">
    /// The error message to be logged. Should describe the nature of the error that occurred on the client side.
    /// </param>
    /// <remarks>
    /// This method inserts a new log entry with severity level <c>0</c>, which represents an error.
    /// The log is associated with the sender of the current context and timestamped accordingly.
    /// </remarks>
    public static void Error(ReducerContext ctx, string message)
    {
        ctx.Db.ClientDebugLog.Insert(new(ctx.Sender, 0, message, ctx.Timestamp));
    }

    /// <summary>
    /// Logs a warning message to the <c>ClientDebugLog</c> table for the current sender.
    /// </summary>
    /// <param name="ctx">
    /// The <see cref="ReducerContext"/> containing metadata about the current reducer execution,
    /// including the identity of the sender and the current timestamp.
    /// </param>
    /// <param name="message">
    /// The warning message to be logged. Typically used for non-critical issues that may require attention.
    /// </param>
    /// <remarks>
    /// This method inserts a new log entry with severity level <c>1</c>, which represents a warning.
    /// The log is associated with the sender of the current context and timestamped accordingly.
    /// </remarks>
    public static void Warning(ReducerContext ctx, string message)
    {
        ctx.Db.ClientDebugLog.Insert(new(ctx.Sender, 1, message, ctx.Timestamp));
    }

    /// <summary>
    /// Logs an informational message to the <c>ClientDebugLog</c> table for the current sender.
    /// </summary>
    /// <param name="ctx">
    /// The <see cref="ReducerContext"/> containing metadata about the current reducer execution,
    /// including the identity of the sender and the current timestamp.
    /// </param>
    /// <param name="message">
    /// The informational message to be logged. Typically used to record successful operations or status updates.
    /// </param>
    /// <remarks>
    /// This method inserts a new log entry with severity level <c>5</c>, which represents an informational message.
    /// The log is associated with the sender of the current context and timestamped accordingly.
    /// </remarks>
    public static void Info(ReducerContext ctx, string message)
    {
        ctx.Db.ClientDebugLog.Insert(new(ctx.Sender, 5, message, ctx.Timestamp));
    }
}
